Task 1: Becoming our own CA
Initialization and task:
Docker setup
Copy config file to directory and edit the file (uncomment unique subject to allow us to create multiple certificates with same subject), create index.txt (empty) and serial (contains 1000 as str) files. 
Generating ca.key and ca.crt using given code (password = cupcake)

Answering questions
What part of the certificate indicates this is a CA’s certificate? When analyzing the output of ca.crt, there is a part that says CA: TRUE that proves that this is a CA Certificate. (Screenshot below - highlighted yellow) 
What part of the certificate indicates this is a self-signed certificate? When analyzing the output of ca.crt, Subject Key Identifier and Authority Key Identifier are the same, meaning this is self-signed. (Screenshot below - highlighted green)

Public exponent (e)
Certificate file:
Key file: 
Private exponent (d)
Key file:


Modulus (n)
Certificate file

Key file 

n = pq (the prime factors of modulus n), p and q will be the prime factors in the key file (Screenshots below for p and q):



Task 2: Intermediate CA Setup
Steps:
1. Generating Private Key and CSR for the Website (bank32.com):
    Command: openssl req -newkey rsa:2048 -sha256 \
  -keyout server.key -out server.csr \
                       -subj "/CN=www.bank32.com/O=Bank32 Inc./C=US" \
                       -passout pass:dees

2. Check that its properly generated:
	openssl req -in server.csr -text -noout
openssl rsa -in server.key -text -noout

3. Add the alternative website names: 
	Command: openssl req -newkey rsa:2048 -sha256 \
  -keyout server.key -out server.csr \
                       -subj "/CN=www.bank32.com/O=Bank32 Inc./C=US" \
                       -passout pass:dees -addext "subjectAltName = DNS:www.bank32.com, \
   DNS:www.bank32A.com, \
   DNS:www.bank32B.com"
Output:
server.key (private key) and server.crt (signed certificate) are generated.
Screenshot:













Task 3: Signing Certificate for a Website

Objective:
Sign the website's certificate using the intermediate CA.

Steps:
1. Signing the Website’s CSR with the Root CA.
Command: `openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -out server.crt -days 365 -sha256`

2. Uncommenting ‘copy’ in openssl.cnf to allow openssl ca command to access the website through alternative names. 

Output:
- Generated `server.key` (private key) and `server.crt` (signed certificate).

Screenshot:








Task 4: Deploying Certificate in Apache-Based HTTPS Website

Objective:
Deploy the signed certificate on an Apache server to secure the website with HTTPS.

Steps:
1. Modify the Apache VirtualHost file to configure SSL settings:
   - SSLCertificateFile: Path to the signed certificate (e.g., `server.crt`).
   - SSLCertificateKeyFile: Path to the private key (e.g., `server.key`).
   
2. Restart Apache.
    Command: ` service apache2 restart`

Enabling ssl module and bank32 site (a2enmod…, a2ensite…) 

4. Access the site using HTTPS.

5. Website is initially inaccessible. In order to fix the “Potential Security Risk…” warning showing up, we had to add our docker hosts to /etc/hosts to set up the DNS. This allowed the website to resolve the www.bank32.com domain to the server’s IP address.
	‘10.9.0.80 www.bank32.com www.bank32A.com www.bank32B.com’

Output:
- Apache server successfully serves the site over HTTPS.

Screenshot:

 


Task 5: Launching a Man-In-The-Middle Attack

Objective:
Simulate a Man-In-The-Middle (MITM) attack by impersonating a target website (e.g., `example.com`).

Steps:
1. Modify the Apache configuration (ssl conf file) to impersonate `www.example.com`.
   - Use `ServerName www.example.com` in the Apache config.

2. Modify the victim’s `/etc/hosts` file to redirect requests to your malicious web server.
   - Add entry: `10.9.0.80 www.example.com`

3. Restart Apache and visit the impersonated site.

Output:
- Browser should display a warning that the certificate is invalid, indicating a potential MITM attack.

Screenshot:









Task 6: MITM Attack with Compromised CA

Objective:
Demonstrate a successful MITM attack using a compromised CA, where the browser does not raise any security warnings.

Steps:
1. Use the compromised CA to sign a fake certificate for `www.example.com`.
    openssl req -newkey rsa:2048 -sha256  \
     -keyout fake.key   -out fake.csr  \
     -subj "/CN=www.example.com/O=example Inc./C=US" \
     -passout pass:dees

2. Generate certificate for server (using CA root):
  openssl ca -config openssl.cnf -policy policy_anything \
    -md sha256 -days 3650 \
    -in fake.csr -out fake.crt -batch \
    -cert ca.crt -keyfile ca.key
   
2. Modify Apache config to use this fake certificate for the `example.com` server:
	<VirtualHost *:443>
    DocumentRoot /var/www/bank32
    ServerName www.example.com
    DirectoryIndex index.html
    SSLEngine On
    SSLCertificateFile /certs/fake.crt
    SSLCertificateKeyFile /certs/fake.key
</VirtualHost>

3. Import the compromised CA certificate into the browser’s trusted certificate store.

4. Visit the impersonated site again.

Output:
- The browser should now accept the fake certificate without raising any warnings.

Screenshot:




 




